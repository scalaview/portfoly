import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.finance as mpf

a = np.array([0, 0.5, 1, 1.5, 2.5])
type(a)
# <class 'numpy.ndarray'>

a.cumsum()
# array([ 0. ,  0.5,  1.5,  3. ,  5.5])

a.std()
# 0.86023252670426265

np.sqrt(a)
# array([ 0.        ,  0.70710678,  1.        ,  1.22474487,  1.58113883])

b = np.array([a, a*2])
# array([[ 0. ,  0.5,  1. ,  1.5,  2.5],
       # [ 0. ,  1. ,  2. ,  3. ,  5. ]])

b.sum(axis=0)
# 列总和
# array([ 0. ,  1.5,  3. ,  4.5,  7.5])

b.sum(axis=1)
# 行总和
# array([  5.5,  11. ])

I=5000
mat = np.random.standard_normal((I, I))

'''
array([[ 0.70440978, -0.28934564,  0.33040995, ...,  0.24971659,
         1.53886504,  0.31421421],
       [ 0.05539943,  1.3665694 , -0.02852723, ...,  0.18679043,
        -0.14548128, -0.26732437],
       [-0.16091166, -0.90384891, -0.70739462, ..., -1.40085547,
        -0.12118898,  0.8613634 ],
       ...,
       [-0.10799825,  0.98114738,  0.95766993, ...,  0.55018851,
        -0.1587904 , -0.60106746],
       [-1.19773265,  1.58523131,  0.53110818, ...,  0.42379578,
         0.86828483, -0.47225495],
       [ 0.69664642,  0.19423953, -0.15674871, ...,  0.62350978,
        -1.96899707, -0.71366818]])
'''

type(mat)
# <class 'numpy.ndarray'>


dt = np.dtype([('Name', 'S10'), ('Age', 'i4'), ('Height', 'f'), ('Children/Pets', 'i4', 2)])
# dtype([('Name', 'S10'), ('Age', '<i4'), ('Height', '<f4'), ('Children/Pets', '<i4', (2,))])

s = np.array([('Smith', 45, 1.83, (0, 1)), ('Jones', 53, 1.72, (2, 2))], dtype=dt)
'''
>>> s
array([(b'Smith', 45, 1.8300000429153442, [0, 1]),
       (b'Jones', 53, 1.7200000286102295, [2, 2])],
      dtype=[('Name', 'S10'), ('Age', '<i4'), ('Height', '<f4'), ('Children/Pets', '<i4', (2,))])
'''

s['Name']
# array([b'Smith', b'Jones'],
      # dtype='|S10')

s["Height"]
# array([ 1.83000004,  1.72000003], dtype=float32)

s["Height"].mean()
# 1.7750001


ss = np.random.standard_normal((2, 3))
# array([[-2.83850479, -1.48970817, -1.05746543],
       # [-0.6511068 , -1.13146471, -1.33423043]])

ss.transpose()
# array([[-2.83850479, -0.6511068 ],
       # [-1.48970817, -1.13146471],
       # [-1.05746543, -1.33423043]])

np.shape(ss.T)
# (3, 2)
np.shape(ss.transpose().T)
# (2, 3)

np.sin(ss)
# array([[-0.29846874, -0.99671416, -0.8711136 ],
       # [-0.60606714, -0.90503615, -0.97214854]])


np.random.seed(1000)
y = np.random.standard_normal(20)
# array([ 1.08190355, -0.05172753, -1.39495498, -0.5373788 , -0.42204881,
        # 0.49239526, -0.64690996,  1.45444561,  0.57363145, -0.74841131,
       # -0.4122031 , -0.07400906, -0.92893693,  1.39006147,  1.19506933,
        # 0.70734239,  0.99296211,  0.13946394, -0.08988248, -0.14974264])
x = range(len(y))
plt.plot(x, y)
plt.show()

# =======
x = np.random.standard_normal((20, 2))
'''
array([[-0.66844251, -1.03332741],
       [ 2.5052391 ,  0.10662364],
       [ 0.36308511,  1.11232645],
       [-0.59172085,  1.5448004 ],
       [ 2.47639208, -2.87470857],
       [ 2.3960241 ,  0.13124583],
       [ 0.30439887,  1.17660585],
       [ 0.12989416,  0.21369857],
       [ 0.09996282, -0.04785691],
       [ 0.37494644,  0.40462887],
       [ 0.33815844,  0.19862082],
       [-1.39696286, -0.74150159],
       [ 1.16431059, -0.91628325],
       [-0.2530479 ,  1.69172841],
       [-0.76961807,  0.78671555],
       [ 0.15520977,  0.87568671],
       [ 2.60165615,  0.6488518 ],
       [ 0.34667744, -0.48201208],
       [-1.7380585 ,  1.06003454],
       [ 2.78081332, -0.46839194]])
'''

y = x.cumsum(axis=0)
'''
array([[ -0.66844251,  -1.03332741],
       [  1.83679659,  -0.92670378],
       [  2.1998817 ,   0.18562267],
       [  1.60816085,   1.73042307],
       [  4.08455293,  -1.1442855 ],
       [  6.48057704,  -1.01303967],
       [  6.7849759 ,   0.16356617],
       [  6.91487007,   0.37726474],
       [  7.01483289,   0.32940783],
       [  7.38977933,   0.73403671],
       [  7.72793777,   0.93265753],
       [  6.33097491,   0.19115593],
       [  7.4952855 ,  -0.72512732],
       [  7.24223761,   0.96660109],
       [  6.47261954,   1.75331664],
       [  6.6278293 ,   2.62900336],
       [  9.22948546,   3.27785516],
       [  9.5761629 ,   2.79584307],
       [  7.8381044 ,   3.85587762],
       [ 10.61891772,   3.38748568]])
'''

fig, ax1 = plt.subplots()
# use plot first data set using left axis
plt.plot(y[:, 0]*100, lw=1.5, label="1st")
plt.plot(y[:, 0]*100, "ro")
plt.grid(True)
ax2 = ax1.twinx()
# set second data using right axis
plt.plot(y[:, 1], 'g', lw=1.5, label="2nd")
plt.plot(y[:, 1], 'ro')
plt.show()


plt.bar(np.arange(len(y)), y[:, 1], width=0.5, color='g', label='2nd')


c = np.random.randint(0, 10, len(y))
# array([3, 4, 4, 8, 7, 1, 8, 0, 5, 6, 1, 3, 2, 4, 9, 8, 6, 9, 8, 3])
plt.subplot(211)
plt.scatter(y[:, 0], y[ :, 1])
plt.subplot(212)
plt.scatter(y[:, 0], y[ :, 1], c=c)
plt.colorbar()
plt.show()



plt.hist(y[:, 0], label=['1st', '2nd'], bins=20)
plt.hist(y, label=['1st', '2nd'], stacked=True, bins=20)
# 统计频率的直方图

