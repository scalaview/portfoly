import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.finance as mpf
import pandas as pd

a = np.array([0, 0.5, 1, 1.5, 2.5])
type(a)
# <class 'numpy.ndarray'>

a.cumsum()
# array([ 0. ,  0.5,  1.5,  3. ,  5.5])

a.std()
# 0.86023252670426265

np.sqrt(a)
# array([ 0.        ,  0.70710678,  1.        ,  1.22474487,  1.58113883])

b = np.array([a, a*2])
# array([[ 0. ,  0.5,  1. ,  1.5,  2.5],
       # [ 0. ,  1. ,  2. ,  3. ,  5. ]])

b.sum(axis=0)
# 列总和
# array([ 0. ,  1.5,  3. ,  4.5,  7.5])

b.sum(axis=1)
# 行总和
# array([  5.5,  11. ])

I=5000
mat = np.random.standard_normal((I, I))

'''
array([[ 0.70440978, -0.28934564,  0.33040995, ...,  0.24971659,
         1.53886504,  0.31421421],
       [ 0.05539943,  1.3665694 , -0.02852723, ...,  0.18679043,
        -0.14548128, -0.26732437],
       [-0.16091166, -0.90384891, -0.70739462, ..., -1.40085547,
        -0.12118898,  0.8613634 ],
       ...,
       [-0.10799825,  0.98114738,  0.95766993, ...,  0.55018851,
        -0.1587904 , -0.60106746],
       [-1.19773265,  1.58523131,  0.53110818, ...,  0.42379578,
         0.86828483, -0.47225495],
       [ 0.69664642,  0.19423953, -0.15674871, ...,  0.62350978,
        -1.96899707, -0.71366818]])
'''

type(mat)
# <class 'numpy.ndarray'>


dt = np.dtype([('Name', 'S10'), ('Age', 'i4'), ('Height', 'f'), ('Children/Pets', 'i4', 2)])
# dtype([('Name', 'S10'), ('Age', '<i4'), ('Height', '<f4'), ('Children/Pets', '<i4', (2,))])

s = np.array([('Smith', 45, 1.83, (0, 1)), ('Jones', 53, 1.72, (2, 2))], dtype=dt)
'''
s
array([(b'Smith', 45, 1.8300000429153442, [0, 1]),
       (b'Jones', 53, 1.7200000286102295, [2, 2])],
      dtype=[('Name', 'S10'), ('Age', '<i4'), ('Height', '<f4'), ('Children/Pets', '<i4', (2,))])
'''

s['Name']
# array([b'Smith', b'Jones'],
      # dtype='|S10')

s["Height"]
# array([ 1.83000004,  1.72000003], dtype=float32)

s["Height"].mean()
# 1.7750001


ss = np.random.standard_normal((2, 3))
# array([[-2.83850479, -1.48970817, -1.05746543],
       # [-0.6511068 , -1.13146471, -1.33423043]])

ss.transpose()
# array([[-2.83850479, -0.6511068 ],
       # [-1.48970817, -1.13146471],
       # [-1.05746543, -1.33423043]])

np.shape(ss.T)
# (3, 2)
np.shape(ss.transpose().T)
# (2, 3)

np.sin(ss)
# array([[-0.29846874, -0.99671416, -0.8711136 ],
       # [-0.60606714, -0.90503615, -0.97214854]])


np.random.seed(1000)
y = np.random.standard_normal(20)
# array([ 1.08190355, -0.05172753, -1.39495498, -0.5373788 , -0.42204881,
        # 0.49239526, -0.64690996,  1.45444561,  0.57363145, -0.74841131,
       # -0.4122031 , -0.07400906, -0.92893693,  1.39006147,  1.19506933,
        # 0.70734239,  0.99296211,  0.13946394, -0.08988248, -0.14974264])
x = range(len(y))
plt.plot(x, y)
plt.show()

# =======
x = np.random.standard_normal((20, 2))
'''
array([[-0.66844251, -1.03332741],
       [ 2.5052391 ,  0.10662364],
       [ 0.36308511,  1.11232645],
       [-0.59172085,  1.5448004 ],
       [ 2.47639208, -2.87470857],
       [ 2.3960241 ,  0.13124583],
       [ 0.30439887,  1.17660585],
       [ 0.12989416,  0.21369857],
       [ 0.09996282, -0.04785691],
       [ 0.37494644,  0.40462887],
       [ 0.33815844,  0.19862082],
       [-1.39696286, -0.74150159],
       [ 1.16431059, -0.91628325],
       [-0.2530479 ,  1.69172841],
       [-0.76961807,  0.78671555],
       [ 0.15520977,  0.87568671],
       [ 2.60165615,  0.6488518 ],
       [ 0.34667744, -0.48201208],
       [-1.7380585 ,  1.06003454],
       [ 2.78081332, -0.46839194]])
'''

y = x.cumsum(axis=0)
'''
array([[ -0.66844251,  -1.03332741],
       [  1.83679659,  -0.92670378],
       [  2.1998817 ,   0.18562267],
       [  1.60816085,   1.73042307],
       [  4.08455293,  -1.1442855 ],
       [  6.48057704,  -1.01303967],
       [  6.7849759 ,   0.16356617],
       [  6.91487007,   0.37726474],
       [  7.01483289,   0.32940783],
       [  7.38977933,   0.73403671],
       [  7.72793777,   0.93265753],
       [  6.33097491,   0.19115593],
       [  7.4952855 ,  -0.72512732],
       [  7.24223761,   0.96660109],
       [  6.47261954,   1.75331664],
       [  6.6278293 ,   2.62900336],
       [  9.22948546,   3.27785516],
       [  9.5761629 ,   2.79584307],
       [  7.8381044 ,   3.85587762],
       [ 10.61891772,   3.38748568]])
'''

fig, ax1 = plt.subplots()
# use plot first data set using left axis
plt.plot(y[:, 0]*100, lw=1.5, label="1st")
plt.plot(y[:, 0]*100, "ro")
plt.grid(True)
ax2 = ax1.twinx()
# set second data using right axis
plt.plot(y[:, 1], 'g', lw=1.5, label="2nd")
plt.plot(y[:, 1], 'ro')
plt.show()


plt.bar(np.arange(len(y)), y[:, 1], width=0.5, color='g', label='2nd')


c = np.random.randint(0, 10, len(y))
# array([3, 4, 4, 8, 7, 1, 8, 0, 5, 6, 1, 3, 2, 4, 9, 8, 6, 9, 8, 3])
plt.subplot(211)
plt.scatter(y[:, 0], y[ :, 1])
plt.subplot(212)
plt.scatter(y[:, 0], y[ :, 1], c=c)
plt.colorbar()
plt.show()



plt.hist(y[:, 0], label=['1st', '2nd'], bins=20)
plt.hist(y, label=['1st', '2nd'], stacked=True, bins=20)
# 统计频率的直方图


strike = np.linspace(50, 150, 24)
ttm = np.linspace(0.5, 2.5, 24)
ttm
array([ 0.5       ,  0.58695652,  0.67391304,  0.76086957,  0.84782609,
        0.93478261,  1.02173913,  1.10869565,  1.19565217,  1.2826087 ,
        1.36956522,  1.45652174,  1.54347826,  1.63043478,  1.7173913 ,
        1.80434783,  1.89130435,  1.97826087,  2.06521739,  2.15217391,
        2.23913043,  2.32608696,  2.41304348,  2.5       ])
strike, ttm = np.meshgrid(strike, ttm)
strike
array([[  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ],
       [  50.        ,   54.34782609,   58.69565217,   63.04347826,
          67.39130435,   71.73913043,   76.08695652,   80.43478261,
          84.7826087 ,   89.13043478,   93.47826087,   97.82608696,
         102.17391304,  106.52173913,  110.86956522,  115.2173913 ,
         119.56521739,  123.91304348,  128.26086957,  132.60869565,
         136.95652174,  141.30434783,  145.65217391,  150.        ]])
ttm
array([[ 0.5       ,  0.5       ,  0.5       ,  0.5       ,  0.5       ,
         0.5       ,  0.5       ,  0.5       ,  0.5       ,  0.5       ,
         0.5       ,  0.5       ,  0.5       ,  0.5       ,  0.5       ,
         0.5       ,  0.5       ,  0.5       ,  0.5       ,  0.5       ,
         0.5       ,  0.5       ,  0.5       ,  0.5       ],
       [ 0.58695652,  0.58695652,  0.58695652,  0.58695652,  0.58695652,
         0.58695652,  0.58695652,  0.58695652,  0.58695652,  0.58695652,
         0.58695652,  0.58695652,  0.58695652,  0.58695652,  0.58695652,
         0.58695652,  0.58695652,  0.58695652,  0.58695652,  0.58695652,
         0.58695652,  0.58695652,  0.58695652,  0.58695652],
       [ 0.67391304,  0.67391304,  0.67391304,  0.67391304,  0.67391304,
         0.67391304,  0.67391304,  0.67391304,  0.67391304,  0.67391304,
         0.67391304,  0.67391304,  0.67391304,  0.67391304,  0.67391304,
         0.67391304,  0.67391304,  0.67391304,  0.67391304,  0.67391304,
         0.67391304,  0.67391304,  0.67391304,  0.67391304],
       [ 0.76086957,  0.76086957,  0.76086957,  0.76086957,  0.76086957,
         0.76086957,  0.76086957,  0.76086957,  0.76086957,  0.76086957,
         0.76086957,  0.76086957,  0.76086957,  0.76086957,  0.76086957,
         0.76086957,  0.76086957,  0.76086957,  0.76086957,  0.76086957,
         0.76086957,  0.76086957,  0.76086957,  0.76086957],
       [ 0.84782609,  0.84782609,  0.84782609,  0.84782609,  0.84782609,
         0.84782609,  0.84782609,  0.84782609,  0.84782609,  0.84782609,
         0.84782609,  0.84782609,  0.84782609,  0.84782609,  0.84782609,
         0.84782609,  0.84782609,  0.84782609,  0.84782609,  0.84782609,
         0.84782609,  0.84782609,  0.84782609,  0.84782609],
       [ 0.93478261,  0.93478261,  0.93478261,  0.93478261,  0.93478261,
         0.93478261,  0.93478261,  0.93478261,  0.93478261,  0.93478261,
         0.93478261,  0.93478261,  0.93478261,  0.93478261,  0.93478261,
         0.93478261,  0.93478261,  0.93478261,  0.93478261,  0.93478261,
         0.93478261,  0.93478261,  0.93478261,  0.93478261],
       [ 1.02173913,  1.02173913,  1.02173913,  1.02173913,  1.02173913,
         1.02173913,  1.02173913,  1.02173913,  1.02173913,  1.02173913,
         1.02173913,  1.02173913,  1.02173913,  1.02173913,  1.02173913,
         1.02173913,  1.02173913,  1.02173913,  1.02173913,  1.02173913,
         1.02173913,  1.02173913,  1.02173913,  1.02173913],
       [ 1.10869565,  1.10869565,  1.10869565,  1.10869565,  1.10869565,
         1.10869565,  1.10869565,  1.10869565,  1.10869565,  1.10869565,
         1.10869565,  1.10869565,  1.10869565,  1.10869565,  1.10869565,
         1.10869565,  1.10869565,  1.10869565,  1.10869565,  1.10869565,
         1.10869565,  1.10869565,  1.10869565,  1.10869565],
       [ 1.19565217,  1.19565217,  1.19565217,  1.19565217,  1.19565217,
         1.19565217,  1.19565217,  1.19565217,  1.19565217,  1.19565217,
         1.19565217,  1.19565217,  1.19565217,  1.19565217,  1.19565217,
         1.19565217,  1.19565217,  1.19565217,  1.19565217,  1.19565217,
         1.19565217,  1.19565217,  1.19565217,  1.19565217],
       [ 1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,
         1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,
         1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,
         1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ,
         1.2826087 ,  1.2826087 ,  1.2826087 ,  1.2826087 ],
       [ 1.36956522,  1.36956522,  1.36956522,  1.36956522,  1.36956522,
         1.36956522,  1.36956522,  1.36956522,  1.36956522,  1.36956522,
         1.36956522,  1.36956522,  1.36956522,  1.36956522,  1.36956522,
         1.36956522,  1.36956522,  1.36956522,  1.36956522,  1.36956522,
         1.36956522,  1.36956522,  1.36956522,  1.36956522],
       [ 1.45652174,  1.45652174,  1.45652174,  1.45652174,  1.45652174,
         1.45652174,  1.45652174,  1.45652174,  1.45652174,  1.45652174,
         1.45652174,  1.45652174,  1.45652174,  1.45652174,  1.45652174,
         1.45652174,  1.45652174,  1.45652174,  1.45652174,  1.45652174,
         1.45652174,  1.45652174,  1.45652174,  1.45652174],
       [ 1.54347826,  1.54347826,  1.54347826,  1.54347826,  1.54347826,
         1.54347826,  1.54347826,  1.54347826,  1.54347826,  1.54347826,
         1.54347826,  1.54347826,  1.54347826,  1.54347826,  1.54347826,
         1.54347826,  1.54347826,  1.54347826,  1.54347826,  1.54347826,
         1.54347826,  1.54347826,  1.54347826,  1.54347826],
       [ 1.63043478,  1.63043478,  1.63043478,  1.63043478,  1.63043478,
         1.63043478,  1.63043478,  1.63043478,  1.63043478,  1.63043478,
         1.63043478,  1.63043478,  1.63043478,  1.63043478,  1.63043478,
         1.63043478,  1.63043478,  1.63043478,  1.63043478,  1.63043478,
         1.63043478,  1.63043478,  1.63043478,  1.63043478],
       [ 1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,
         1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,
         1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,
         1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ,
         1.7173913 ,  1.7173913 ,  1.7173913 ,  1.7173913 ],
       [ 1.80434783,  1.80434783,  1.80434783,  1.80434783,  1.80434783,
         1.80434783,  1.80434783,  1.80434783,  1.80434783,  1.80434783,
         1.80434783,  1.80434783,  1.80434783,  1.80434783,  1.80434783,
         1.80434783,  1.80434783,  1.80434783,  1.80434783,  1.80434783,
         1.80434783,  1.80434783,  1.80434783,  1.80434783],
       [ 1.89130435,  1.89130435,  1.89130435,  1.89130435,  1.89130435,
         1.89130435,  1.89130435,  1.89130435,  1.89130435,  1.89130435,
         1.89130435,  1.89130435,  1.89130435,  1.89130435,  1.89130435,
         1.89130435,  1.89130435,  1.89130435,  1.89130435,  1.89130435,
         1.89130435,  1.89130435,  1.89130435,  1.89130435],
       [ 1.97826087,  1.97826087,  1.97826087,  1.97826087,  1.97826087,
         1.97826087,  1.97826087,  1.97826087,  1.97826087,  1.97826087,
         1.97826087,  1.97826087,  1.97826087,  1.97826087,  1.97826087,
         1.97826087,  1.97826087,  1.97826087,  1.97826087,  1.97826087,
         1.97826087,  1.97826087,  1.97826087,  1.97826087],
       [ 2.06521739,  2.06521739,  2.06521739,  2.06521739,  2.06521739,
         2.06521739,  2.06521739,  2.06521739,  2.06521739,  2.06521739,
         2.06521739,  2.06521739,  2.06521739,  2.06521739,  2.06521739,
         2.06521739,  2.06521739,  2.06521739,  2.06521739,  2.06521739,
         2.06521739,  2.06521739,  2.06521739,  2.06521739],
       [ 2.15217391,  2.15217391,  2.15217391,  2.15217391,  2.15217391,
         2.15217391,  2.15217391,  2.15217391,  2.15217391,  2.15217391,
         2.15217391,  2.15217391,  2.15217391,  2.15217391,  2.15217391,
         2.15217391,  2.15217391,  2.15217391,  2.15217391,  2.15217391,
         2.15217391,  2.15217391,  2.15217391,  2.15217391],
       [ 2.23913043,  2.23913043,  2.23913043,  2.23913043,  2.23913043,
         2.23913043,  2.23913043,  2.23913043,  2.23913043,  2.23913043,
         2.23913043,  2.23913043,  2.23913043,  2.23913043,  2.23913043,
         2.23913043,  2.23913043,  2.23913043,  2.23913043,  2.23913043,
         2.23913043,  2.23913043,  2.23913043,  2.23913043],
       [ 2.32608696,  2.32608696,  2.32608696,  2.32608696,  2.32608696,
         2.32608696,  2.32608696,  2.32608696,  2.32608696,  2.32608696,
         2.32608696,  2.32608696,  2.32608696,  2.32608696,  2.32608696,
         2.32608696,  2.32608696,  2.32608696,  2.32608696,  2.32608696,
         2.32608696,  2.32608696,  2.32608696,  2.32608696],
       [ 2.41304348,  2.41304348,  2.41304348,  2.41304348,  2.41304348,
         2.41304348,  2.41304348,  2.41304348,  2.41304348,  2.41304348,
         2.41304348,  2.41304348,  2.41304348,  2.41304348,  2.41304348,
         2.41304348,  2.41304348,  2.41304348,  2.41304348,  2.41304348,
         2.41304348,  2.41304348,  2.41304348,  2.41304348],
       [ 2.5       ,  2.5       ,  2.5       ,  2.5       ,  2.5       ,
         2.5       ,  2.5       ,  2.5       ,  2.5       ,  2.5       ,
         2.5       ,  2.5       ,  2.5       ,  2.5       ,  2.5       ,
         2.5       ,  2.5       ,  2.5       ,  2.5       ,  2.5       ,
         2.5       ,  2.5       ,  2.5       ,  2.5       ]])
strike - 100
array([[-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ],
       [-50.        , -45.65217391, -41.30434783, -36.95652174,
        -32.60869565, -28.26086957, -23.91304348, -19.56521739,
        -15.2173913 , -10.86956522,  -6.52173913,  -2.17391304,
          2.17391304,   6.52173913,  10.86956522,  15.2173913 ,
         19.56521739,  23.91304348,  28.26086957,  32.60869565,
         36.95652174,  41.30434783,  45.65217391,  50.        ]])
iv = (strike - 100)**2 / (100 * strike) /ttm
iv
array([[  1.00000000e+00,   7.66956522e-01,   5.81320451e-01,
          4.33283358e-01,   3.15568022e-01,   2.22661397e-01,
          1.50310559e-01,   9.51821387e-02,   5.46265329e-02,
          2.65111347e-02,   9.10010111e-03,   9.66183575e-04,
          9.25069380e-04,   7.98580302e-03,   2.13128730e-02,
          4.01968827e-02,   6.40316206e-02,   9.22959573e-02,
          1.24539425e-01,   1.60370634e-01,   1.99447895e-01,
          2.41471572e-01,   2.86177807e-01,   3.33333333e-01],
       [  8.51851852e-01,   6.53333333e-01,   4.95198903e-01,
          3.69093231e-01,   2.68817204e-01,   1.89674523e-01,
          1.28042328e-01,   8.10810811e-02,   4.65337132e-02,
          2.25835592e-02,   7.75193798e-03,   8.23045267e-04,
          7.88022065e-04,   6.80272109e-03,   1.81554103e-02,
          3.42417890e-02,   5.45454545e-02,   7.86224821e-02,
          1.06089140e-01,   1.36612022e-01,   1.69900059e-01,
          2.05698006e-01,   2.43781095e-01,   2.83950617e-01],
       [  7.41935484e-01,   5.69032258e-01,   4.31302270e-01,
          3.21468298e-01,   2.34131113e-01,   1.65200391e-01,
          1.11520737e-01,   7.06190061e-02,   4.05293631e-02,
          1.96695515e-02,   6.75168792e-03,   7.16845878e-04,
          6.86341798e-04,   5.92495063e-03,   1.58127767e-02,
          2.98234936e-02,   4.75073314e-02,   6.84776457e-02,
          9.24002187e-02,   1.18984664e-01,   1.47977471e-01,
          1.79156328e-01,   2.12325469e-01,   2.47311828e-01],
       [  6.57142857e-01,   5.04000000e-01,   3.82010582e-01,
          2.84729064e-01,   2.07373272e-01,   1.46320346e-01,
          9.87755102e-02,   6.25482625e-02,   3.58974359e-02,
          1.74216028e-02,   5.98006645e-03,   6.34920635e-04,
          6.07902736e-04,   5.24781341e-03,   1.40056022e-02,
          2.64150943e-02,   4.20779221e-02,   6.06516291e-02,
          8.18401937e-02,   1.05386417e-01,   1.31065760e-01,
          1.58681319e-01,   1.88059701e-01,   2.19047619e-01],
       [  5.89743590e-01,   4.52307692e-01,   3.42830009e-01,
          2.55526083e-01,   1.86104218e-01,   1.31313131e-01,
          8.86446886e-02,   5.61330561e-02,   3.22156476e-02,
          1.56347717e-02,   5.36672630e-03,   5.69800570e-04,
          5.45553737e-04,   4.70957614e-03,   1.25691302e-02,
          2.37058539e-02,   3.77622378e-02,   5.44309492e-02,
          7.34463277e-02,   9.45775536e-02,   1.17623118e-01,
          1.42406312e-01,   1.68771527e-01,   1.96581197e-01],
       [  5.34883721e-01,   4.10232558e-01,   3.10938846e-01,
          2.31756215e-01,   1.68792198e-01,   1.19097956e-01,
          8.03986711e-02,   5.09113765e-02,   2.92188432e-02,
          1.41803744e-02,   4.86749594e-03,   5.16795866e-04,
          4.94804552e-04,   4.27147603e-03,   1.13999088e-02,
          2.15006582e-02,   3.42494715e-02,   4.93676051e-02,
          6.66141112e-02,   8.57796416e-02,   1.06681432e-01,
          1.29159213e-01,   1.53071850e-01,   1.78294574e-01],
       [  4.89361702e-01,   3.75319149e-01,   2.84475965e-01,
          2.12032282e-01,   1.54426905e-01,   1.08961960e-01,
          7.35562310e-02,   4.65784934e-02,   2.67321331e-02,
          1.29735340e-02,   4.45324097e-03,   4.72813239e-04,
          4.52693526e-04,   3.90794616e-03,   1.04297038e-02,
          1.96708149e-02,   3.13346228e-02,   4.51661068e-02,
          6.09448251e-02,   7.84792466e-02,   9.76021614e-02,
          1.18166939e-01,   1.40044459e-01,   1.63120567e-01],
       [  4.50980392e-01,   3.45882353e-01,   2.62164125e-01,
          1.95402299e-01,   1.42314991e-01,   1.00415924e-01,
          6.77871148e-02,   4.29252782e-02,   2.46354952e-02,
          1.19560019e-02,   4.10396717e-03,   4.35729847e-04,
          4.17188152e-04,   3.60144058e-03,   9.61168781e-03,
          1.81280059e-02,   2.88770053e-02,   4.16236670e-02,
          5.61648388e-02,   7.23240116e-02,   8.99470899e-02,
          1.08898944e-01,   1.29060579e-01,   1.50326797e-01],
       [  4.18181818e-01,   3.20727273e-01,   2.43097643e-01,
          1.81191223e-01,   1.31964809e-01,   9.31129477e-02,
          6.28571429e-02,   3.98034398e-02,   2.28438228e-02,
          1.10864745e-02,   3.80549683e-03,   4.04040404e-04,
          3.86847195e-04,   3.33951763e-03,   8.91265597e-03,
          1.68096055e-02,   2.67768595e-02,   3.85964912e-02,
          5.20801233e-02,   6.70640835e-02,   8.34054834e-02,
          1.00979021e-01,   1.19674355e-01,   1.39393939e-01],
       [  3.89830508e-01,   2.98983051e-01,   2.26616447e-01,
          1.68907072e-01,   1.23018043e-01,   8.68002054e-02,
          5.85956416e-02,   3.71049015e-02,   2.12950891e-02,
          1.03348491e-02,   3.54749704e-03,   3.76647834e-04,
          3.60620267e-04,   3.11310965e-03,   8.30840811e-03,
          1.56699712e-02,   2.49614792e-02,   3.59797800e-02,
          4.85492675e-02,   6.25173659e-02,   7.77508744e-02,
          9.41329857e-02,   1.11560840e-01,   1.29943503e-01],
       [  3.65079365e-01,   2.80000000e-01,   2.12228101e-01,
          1.58182813e-01,   1.15207373e-01,   8.12890813e-02,
          5.48752834e-02,   3.47490347e-02,   1.99430199e-02,
          9.67866822e-03,   3.32225914e-03,   3.52733686e-04,
          3.37723742e-04,   2.91545190e-03,   7.78089013e-03,
          1.46750524e-02,   2.33766234e-02,   3.36953495e-02,
          4.54667743e-02,   5.85480094e-02,   7.28143109e-02,
          8.81562882e-02,   1.04477612e-01,   1.21693122e-01],
       [  3.43283582e-01,   2.63283582e-01,   1.99557767e-01,
          1.48739063e-01,   1.08329321e-01,   7.64360018e-02,
          5.15991471e-02,   3.26744655e-02,   1.87523919e-02,
          9.10083728e-03,   3.12391531e-03,   3.31674959e-04,
          3.17561131e-04,   2.74139507e-03,   7.31635938e-03,
          1.37989299e-02,   2.19810041e-02,   3.16836868e-02,
          4.27523400e-02,   5.50526058e-02,   6.84671879e-02,
          8.28932262e-02,   9.82401426e-02,   1.14427861e-01],
       [  3.23943662e-01,   2.48450704e-01,   1.88315076e-01,
          1.40359398e-01,   1.02226261e-01,   7.21297482e-02,
          4.86921529e-02,   3.08336506e-02,   1.76959191e-02,
          8.58811405e-03,   2.94792008e-03,   3.12989045e-04,
          2.99670363e-04,   2.58695027e-03,   6.90417012e-03,
          1.30215254e-02,   2.07426376e-02,   2.98986904e-02,
          4.03437575e-02,   5.19510506e-02,   6.46098815e-02,
          7.82231853e-02,   9.27054867e-02,   1.07981221e-01],
       [  3.06666667e-01,   2.35200000e-01,   1.78271605e-01,
          1.32873563e-01,   9.67741935e-02,   6.82828283e-02,
          4.60952381e-02,   2.91891892e-02,   1.67521368e-02,
          8.13008130e-03,   2.79069767e-03,   2.96296296e-04,
          2.83687943e-04,   2.44897959e-03,   6.53594771e-03,
          1.23270440e-02,   1.96363636e-02,   2.83040936e-02,
          3.81920904e-02,   4.91803279e-02,   6.11640212e-02,
          7.40512821e-02,   8.77611940e-02,   1.02222222e-01],
       [  2.91139241e-01,   2.23291139e-01,   1.69245195e-01,
          1.26145788e-01,   9.18742344e-02,   6.48254699e-02,
          4.37613020e-02,   2.77112556e-02,   1.59039273e-02,
          7.71843161e-03,   2.64939653e-03,   2.81293952e-04,
          2.69323997e-04,   2.32498063e-03,   6.20501365e-03,
          1.17028899e-02,   1.86421174e-02,   2.68709749e-02,
          3.62583137e-02,   4.66901847e-02,   5.80671087e-02,
          7.03018500e-02,   8.33175893e-02,   9.70464135e-02],
       [  2.77108434e-01,   2.12530120e-01,   1.61088800e-01,
          1.20066473e-01,   8.74465604e-02,   6.17013509e-02,
          4.16523236e-02,   2.63757734e-02,   1.51374730e-02,
          7.34645901e-03,   2.52171477e-03,   2.67737617e-04,
          2.56344527e-04,   2.21293337e-03,   5.90597685e-03,
          1.11388952e-02,   1.77437021e-02,   2.55759882e-02,
          3.45109251e-02,   4.44400553e-02,   5.52686938e-02,
          6.69138091e-02,   7.93022838e-02,   9.23694779e-02],
       [  2.64367816e-01,   2.02758621e-01,   1.53682418e-01,
          1.14546175e-01,   8.34260289e-02,   5.88645071e-02,
          3.97372742e-02,   2.51630941e-02,   1.44414972e-02,
          7.00869078e-03,   2.40577386e-03,   2.55427842e-04,
          2.44558572e-04,   2.11118930e-03,   5.63443768e-03,
          1.06267621e-02,   1.69278997e-02,   2.44000807e-02,
          3.29242159e-02,   4.23968344e-02,   5.27276045e-02,
          6.38373121e-02,   7.56562017e-02,   8.81226054e-02],
       [  2.52747253e-01,   1.93846154e-01,   1.46927147e-01,
          1.09511178e-01,   7.97589507e-02,   5.62770563e-02,
          3.79905808e-02,   2.40570241e-02,   1.38067061e-02,
          6.70061646e-03,   2.30002556e-03,   2.44200244e-04,
          2.33808744e-04,   2.01838977e-03,   5.38677009e-03,
          1.01596517e-02,   1.61838162e-02,   2.33275496e-02,
          3.14769976e-02,   4.05332373e-02,   5.04099076e-02,
          6.10312764e-02,   7.23306544e-02,   8.42490842e-02],
       [  2.42105263e-01,   1.85684211e-01,   1.40740741e-01,
          1.04900181e-01,   7.64006791e-02,   5.39074960e-02,
          3.63909774e-02,   2.30440967e-02,   1.32253711e-02,
          6.41848524e-03,   2.20318237e-03,   2.33918129e-04,
          2.23964166e-04,   1.93340494e-03,   5.15995872e-03,
          9.73187686e-03,   1.55023923e-02,   2.23453370e-02,
          3.01516503e-02,   3.88265746e-02,   4.82873851e-02,
          5.84615385e-02,   6.92851532e-02,   8.07017544e-02],
       [  2.32323232e-01,   1.78181818e-01,   1.35054246e-01,
          1.00661790e-01,   7.33137830e-02,   5.17294154e-02,
          3.49206349e-02,   2.21130221e-02,   1.26910127e-02,
          6.15915250e-03,   2.11416490e-03,   2.24466891e-04,
          2.14915109e-04,   1.85528757e-03,   4.95147554e-03,
          9.33866972e-03,   1.48760331e-02,   2.14424951e-02,
          2.89334018e-02,   3.72578241e-02,   4.63363797e-02,
          5.60994561e-02,   6.64857531e-02,   7.74410774e-02],
       [  2.23300971e-01,   1.71262136e-01,   1.29809421e-01,
          9.67525946e-02,   7.04666458e-02,   4.97205060e-02,
          3.35644938e-02,   2.12542640e-02,   1.21981578e-02,
          5.91996211e-03,   2.03206141e-03,   2.15749730e-04,
          2.06568891e-04,   1.78323757e-03,   4.75918523e-03,
          8.97600293e-03,   1.42983230e-02,   2.06097769e-02,
          2.78097746e-02,   3.58109184e-02,   4.45369086e-02,
          5.39208364e-02,   6.39037821e-02,   7.44336570e-02],
       [  2.14953271e-01,   1.64859813e-01,   1.24956732e-01,
          9.31356752e-02,   6.78323787e-02,   4.78617955e-02,
          3.23097463e-02,   2.04597120e-02,   1.17421519e-02,
          5.69865512e-03,   1.95609650e-03,   2.07684320e-04,
          1.98846689e-04,   1.71657448e-03,   4.58127176e-03,
          8.64045142e-03,   1.37638063e-02,   1.98393179e-02,
          2.67701568e-02,   3.44721924e-02,   4.28719775e-02,
          5.19051042e-02,   6.15148556e-02,   7.16510903e-02],
       [  2.07207207e-01,   1.58918919e-01,   1.20453787e-01,
          8.97794346e-02,   6.53879686e-02,   4.61370461e-02,
          3.11454311e-02,   1.97224251e-02,   1.13190113e-02,
          5.49329818e-03,   1.88560654e-03,   2.00200200e-04,
          1.91681043e-04,   1.65471594e-03,   4.41618089e-03,
          8.32908380e-03,   1.32678133e-02,   1.91243875e-02,
          2.58054665e-02,   3.32299513e-02,   4.13270413e-02,
          5.00346500e-02,   5.92981041e-02,   6.90690691e-02],
       [  2.00000000e-01,   1.53391304e-01,   1.16264090e-01,
          8.66566717e-02,   6.31136045e-02,   4.45322793e-02,
          3.00621118e-02,   1.90364277e-02,   1.09253066e-02,
          5.30222694e-03,   1.82002022e-03,   1.93236715e-04,
          1.85013876e-04,   1.59716060e-03,   4.26257460e-03,
          8.03937654e-03,   1.28063241e-02,   1.84591915e-02,
          2.49078850e-02,   3.20741269e-02,   3.98895790e-02,
          4.82943144e-02,   5.72355613e-02,   6.66666667e-02]])
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure(figsize=(9, 6))
ax = fig.gca(projection='3d')
ax.view_init(30, 60) # set view rangle
surf=ax.plot_surface(strike, ttm, iv, rstride=2, cstride=2, cmap=plt.cm.coolwarm, linewidth=0.5, antialiased=True)

fig.colorbar(surf, shrink=0.5, aspect=5)
# <matplotlib.colorbar.Colorbar object at 0x7f75a4ccb710>
fig.show()


df = pd.DataFrame([10, 20, 30, 40], columns=['numbers'], index=['a', 'b', 'c', 'd'])
df
   numbers
a       10
b       20
c       30
d       40
df.columns
Index(['numbers'], dtype='object')
df.ix['a']
numbers    10
Name: a, dtype: int64
df.ix[['a', 'd']]
   numbers
a       10
d       40
df.sum()
numbers    100
dtype: int64

def ssum(x):
  print(x)
 
df.apply(ssum)
a    10
b    20
c    30
d    40
Name: numbers, dtype: int64
numbers    None
dtype: object

df.apply(lambda x: x**2)
   numbers
a      100
b      400
c      900
d     1600
df['floats'] = (1.5, 2.5, 3.5, 4.5)
df
   numbers  floats
a       10     1.5
b       20     2.5
c       30     3.5
d       40     4.5
df['names'] = pd.DataFrame(['Yves', 'Guido', 'Felix', 'Francesc'], index=['d', 'a', 'b', 'c'])
df
   numbers  floats     names
a       10     1.5     Guido
b       20     2.5     Felix
c       30     3.5  Francesc
d       40     4.5      Yves

df.append({'numbers': 100, 'floats': 5.75, 'names': 'Henry'}, ignore_index=True)
   numbers  floats     names
0       10    1.50     Guido
1       20    2.50     Felix
2       30    3.50  Francesc
3       40    4.50      Yves
4      100    5.75     Henry
df
   numbers  floats     names
a       10     1.5     Guido
b       20     2.5     Felix
c       30     3.5  Francesc
d       40     4.5      Yves
df.join(pd.DataFrame([1, 4, 9, 16, 25], index=['a', 'b', 'c', 'd', 'y'], columns=['squares']))
   numbers  floats     names  squares
a       10     1.5     Guido        1
b       20     2.5     Felix        4
c       30     3.5  Francesc        9
d       40     4.5      Yves       16
df.join(pd.DataFrame([1, 4, 9, 16, 25], index=['a', 'b', 'c', 'd', 'y'], columns=['squares']), how='outer')
   numbers  floats     names  squares
a     10.0     1.5     Guido        1
b     20.0     2.5     Felix        4
c     30.0     3.5  Francesc        9
d     40.0     4.5      Yves       16
y      NaN     NaN       NaN       25
df
   numbers  floats     names
a       10     1.5     Guido
b       20     2.5     Felix
c       30     3.5  Francesc
d       40     4.5      Yves
df.mean()
numbers    25.0
floats      3.0
dtype: float64
df.std(0)
numbers    12.909944
floats      1.290994
dtype: float64
df.std()
numbers    12.909944
floats      1.290994
dtype: float64



a = np.random.standard_normal((9, 4))
a.round(6)
array([[-0.188603, -1.651191, -0.873416,  0.418814],
       [ 0.174852,  0.491261,  0.845292,  1.139526],
       [-0.763081,  0.281811,  0.966123,  1.795974],
       [-0.057932,  0.869554,  1.470882, -0.570085],
       [-0.288625,  2.19102 , -0.918457, -1.291224],
       [ 1.604467, -1.021435,  0.532326, -0.935846],
       [-0.004012, -0.211094,  0.187276,  0.351893],
       [ 0.386894, -0.350483, -0.938038,  1.281466],
       [-0.975269,  0.449554,  0.349185,  1.100768]])
a
array([[-0.18860272, -1.65119104, -0.87341642,  0.41881362],
       [ 0.17485244,  0.49126109,  0.84529156,  1.13952627],
       [-0.76308136,  0.2818108 ,  0.96612343,  1.79597418],
       [-0.0579318 ,  0.86955433,  1.4708816 , -0.57008498],
       [-0.28862475,  2.19102018, -0.91845743, -1.2912236 ],
       [ 1.60446743, -1.02143469,  0.53232627, -0.93584601],
       [-0.00401202, -0.2110936 ,  0.18727634,  0.35189285],
       [ 0.38689363, -0.35048346, -0.93803824,  1.28146625],
       [-0.97526865,  0.44955379,  0.34918477,  1.10076838]])
df = pd.DataFrame(a.round(6))
df
          0         1         2         3
0 -0.188603 -1.651191 -0.873416  0.418814
1  0.174852  0.491261  0.845292  1.139526
2 -0.763081  0.281811  0.966123  1.795974
3 -0.057932  0.869554  1.470882 -0.570085
4 -0.288625  2.191020 -0.918457 -1.291224
5  1.604467 -1.021435  0.532326 -0.935846
6 -0.004012 -0.211094  0.187276  0.351893
7  0.386894 -0.350483 -0.938038  1.281466
8 -0.975269  0.449554  0.349185  1.100768

df.columns=[['No1', 'No2', 'No3', 'No4']]
df
        No1       No2       No3       No4
0 -0.188603 -1.651191 -0.873416  0.418814
1  0.174852  0.491261  0.845292  1.139526
2 -0.763081  0.281811  0.966123  1.795974
3 -0.057932  0.869554  1.470882 -0.570085
4 -0.288625  2.191020 -0.918457 -1.291224
5  1.604467 -1.021435  0.532326 -0.935846
6 -0.004012 -0.211094  0.187276  0.351893
7  0.386894 -0.350483 -0.938038  1.281466
8 -0.975269  0.449554  0.349185  1.100768
df['No1'][1]
0.17485200000000001

df.round(3)
     No1    No2    No3    No4
0 -0.189 -1.651 -0.873  0.419
1  0.175  0.491  0.845  1.140
2 -0.763  0.282  0.966  1.796
3 -0.058  0.870  1.471 -0.570
4 -0.289  2.191 -0.918 -1.291
5  1.604 -1.021  0.532 -0.936
6 -0.004 -0.211  0.187  0.352
7  0.387 -0.350 -0.938  1.281
8 -0.975  0.450  0.349  1.101
datas = pd.date_range('2016-1-1', periods=9, freq='5D')
datas
DatetimeIndex(['2016-01-01', '2016-01-06', '2016-01-11', '2016-01-16',
               '2016-01-21', '2016-01-26', '2016-01-31', '2016-02-05',
               '2016-02-10'],
              dtype='datetime64[ns]', freq='5D')
datas = pd.date_range('2016-1-1', periods=9, freq='M')
datas
DatetimeIndex(['2016-01-31', '2016-02-29', '2016-03-31', '2016-04-30',
               '2016-05-31', '2016-06-30', '2016-07-31', '2016-08-31',
               '2016-09-30'],
              dtype='datetime64[ns]', freq='M')
np.array(df).round(6)
array([[-0.188603, -1.651191, -0.873416,  0.418814],
       [ 0.174852,  0.491261,  0.845292,  1.139526],
       [-0.763081,  0.281811,  0.966123,  1.795974],
       [-0.057932,  0.869554,  1.470882, -0.570085],
       [-0.288625,  2.19102 , -0.918457, -1.291224],
       [ 1.604467, -1.021435,  0.532326, -0.935846],
       [-0.004012, -0.211094,  0.187276,  0.351893],
       [ 0.386894, -0.350483, -0.938038,  1.281466],
       [-0.975269,  0.449554,  0.349185,  1.100768]])

np.sqrt(df)
__main__:1: RuntimeWarning: invalid value encountered in sqrt
        No1       No2       No3       No4
0       NaN       NaN       NaN  0.647158
1  0.418153  0.700900  0.919398  1.067486
2       NaN  0.530859  0.982916  1.340140
3       NaN  0.932499  1.212799       NaN
4       NaN  1.480209       NaN       NaN
5  1.266676       NaN  0.729607       NaN
6       NaN       NaN  0.432754  0.593206
7  0.622008       NaN       NaN  1.132019
8       NaN  0.670488  0.590919  1.049175
df
        No1       No2       No3       No4
0 -0.188603 -1.651191 -0.873416  0.418814
1  0.174852  0.491261  0.845292  1.139526
2 -0.763081  0.281811  0.966123  1.795974
3 -0.057932  0.869554  1.470882 -0.570085
4 -0.288625  2.191020 -0.918457 -1.291224
5  1.604467 -1.021435  0.532326 -0.935846
6 -0.004012 -0.211094  0.187276  0.351893
7  0.386894 -0.350483 -0.938038  1.281466
8 -0.975269  0.449554  0.349185  1.100768
np.sqrt(df).cumsum()
        No1       No2       No3       No4
0       NaN       NaN       NaN  0.647158
1  0.418153  0.700900  0.919398  1.714644
2       NaN  1.231759  1.902313  3.054784
3       NaN  2.164258  3.115112       NaN
4       NaN  3.644467       NaN       NaN
5  1.684829       NaN  3.844719       NaN
6       NaN       NaN  4.277473  3.647989
7  2.306837       NaN       NaN  4.780008
8       NaN  4.314955  4.868392  5.829183
df.plot(lw=2.0)
<matplotlib.axes._subplots.AxesSubplot object at 0x7f758d6b4668>
aix = df.plot(lw=2.0)

plt.show()
aix = df.plot(lw=2.0)
plt.show()
df['Quarter'] = ['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2', 'Q3', 'Q3', 'Q3']
df
        No1       No2       No3       No4 Quarter
0 -0.188603 -1.651191 -0.873416  0.418814      Q1
1  0.174852  0.491261  0.845292  1.139526      Q1
2 -0.763081  0.281811  0.966123  1.795974      Q1
3 -0.057932  0.869554  1.470882 -0.570085      Q2
4 -0.288625  2.191020 -0.918457 -1.291224      Q2
5  1.604467 -1.021435  0.532326 -0.935846      Q2
6 -0.004012 -0.211094  0.187276  0.351893      Q3
7  0.386894 -0.350483 -0.938038  1.281466      Q3
8 -0.975269  0.449554  0.349185  1.100768      Q3
groups = df.groupby('Quarter')
groups
<pandas.core.groupby.DataFrameGroupBy object at 0x7f758d172438>
groups.describe()
                    No1       No2       No3       No4
Quarter                                              
Q1      count  3.000000  3.000000  3.000000  3.000000
        mean  -0.258944 -0.292706  0.312666  1.118105
        std    0.472906  1.181134  1.028953  0.688830
        min   -0.763081 -1.651191 -0.873416  0.418814
        25%   -0.475842 -0.684690 -0.014062  0.779170
        50%   -0.188603  0.281811  0.845292  1.139526
        75%   -0.006875  0.386536  0.905707  1.467750
        max    0.174852  0.491261  0.966123  1.795974
Q2      count  3.000000  3.000000  3.000000  3.000000
        mean   0.419303  0.679713  0.361584 -0.932385
        std    1.032843  1.614620  1.203786  0.360582
        min   -0.288625 -1.021435 -0.918457 -1.291224
        25%   -0.173279 -0.075941 -0.193066 -1.113535
        50%   -0.057932  0.869554  0.532326 -0.935846
        75%    0.773267  1.530287  1.001604 -0.752965
        max    1.604467  2.191020  1.470882 -0.570085
Q3      count  3.000000  3.000000  3.000000  3.000000
        mean  -0.197462 -0.037341 -0.133859  0.911376
        std    0.701384  0.427384  0.701129  0.492878
        min   -0.975269 -0.350483 -0.938038  0.351893
        25%   -0.489641 -0.280788 -0.375381  0.726330
        50%   -0.004012 -0.211094  0.187276  1.100768
        75%    0.191441  0.119230  0.268231  1.191117
        max    0.386894  0.449554  0.349185  1.281466
df['Odd_Even']= ['Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd']
df
        No1       No2       No3       No4 Quarter Odd_Even
0 -0.188603 -1.651191 -0.873416  0.418814      Q1      Odd
1  0.174852  0.491261  0.845292  1.139526      Q1     Even
2 -0.763081  0.281811  0.966123  1.795974      Q1      Odd
3 -0.057932  0.869554  1.470882 -0.570085      Q2     Even
4 -0.288625  2.191020 -0.918457 -1.291224      Q2      Odd
5  1.604467 -1.021435  0.532326 -0.935846      Q2     Even
6 -0.004012 -0.211094  0.187276  0.351893      Q3      Odd
7  0.386894 -0.350483 -0.938038  1.281466      Q3     Even
8 -0.975269  0.449554  0.349185  1.100768      Q3      Odd

groups_t = df.groupby(['Quarter', 'Odd_Even'])
groups_t.describe()
                             No1       No2       No3       No4
Quarter Odd_Even                                              
Q1      Even     count  1.000000  1.000000  1.000000  1.000000
                 mean   0.174852  0.491261  0.845292  1.139526
                 std         NaN       NaN       NaN       NaN
                 min    0.174852  0.491261  0.845292  1.139526
                 25%    0.174852  0.491261  0.845292  1.139526
                 50%    0.174852  0.491261  0.845292  1.139526
                 75%    0.174852  0.491261  0.845292  1.139526
                 max    0.174852  0.491261  0.845292  1.139526
        Odd      count  2.000000  2.000000  2.000000  2.000000
                 mean  -0.475842 -0.684690  0.046353  1.107394
                 std    0.406217  1.366839  1.300751  0.973799
                 min   -0.763081 -1.651191 -0.873416  0.418814
                 25%   -0.619461 -1.167941 -0.413531  0.763104
                 50%   -0.475842 -0.684690  0.046353  1.107394
                 75%   -0.332222 -0.201440  0.506238  1.451684
                 max   -0.188603  0.281811  0.966123  1.795974
Q2      Even     count  2.000000  2.000000  2.000000  2.000000
                 mean   0.773267 -0.075941  1.001604 -0.752965
                 std    1.175494  1.337131  0.663659  0.258632
                 min   -0.057932 -1.021435  0.532326 -0.935846
                 25%    0.357668 -0.548688  0.766965 -0.844406
                 50%    0.773267 -0.075941  1.001604 -0.752965
                 75%    1.188867  0.396807  1.236243 -0.661525
                 max    1.604467  0.869554  1.470882 -0.570085
        Odd      count  1.000000  1.000000  1.000000  1.000000
                 mean  -0.288625  2.191020 -0.918457 -1.291224
                 std         NaN       NaN       NaN       NaN
                 min   -0.288625  2.191020 -0.918457 -1.291224
                 25%   -0.288625  2.191020 -0.918457 -1.291224
                 50%   -0.288625  2.191020 -0.918457 -1.291224
                 75%   -0.288625  2.191020 -0.918457 -1.291224
                 max   -0.288625  2.191020 -0.918457 -1.291224
Q3      Even     count  1.000000  1.000000  1.000000  1.000000
                 mean   0.386894 -0.350483 -0.938038  1.281466
                 std         NaN       NaN       NaN       NaN
                 min    0.386894 -0.350483 -0.938038  1.281466
                 25%    0.386894 -0.350483 -0.938038  1.281466
                 50%    0.386894 -0.350483 -0.938038  1.281466
                 75%    0.386894 -0.350483 -0.938038  1.281466
                 max    0.386894 -0.350483 -0.938038  1.281466
        Odd      count  2.000000  2.000000  2.000000  2.000000
                 mean  -0.489641  0.119230  0.268231  0.726330
                 std    0.686782  0.467149  0.114487  0.529535
                 min   -0.975269 -0.211094  0.187276  0.351893
                 25%   -0.732455 -0.045932  0.227753  0.539112
                 50%   -0.489641  0.119230  0.268231  0.726330
                 75%   -0.246826  0.284392  0.308708  0.913549
                 max   -0.004012  0.449554  0.349185  1.100768
df
        No1       No2       No3       No4 Quarter Odd_Even
0 -0.188603 -1.651191 -0.873416  0.418814      Q1      Odd
1  0.174852  0.491261  0.845292  1.139526      Q1     Even
2 -0.763081  0.281811  0.966123  1.795974      Q1      Odd
3 -0.057932  0.869554  1.470882 -0.570085      Q2     Even
4 -0.288625  2.191020 -0.918457 -1.291224      Q2      Odd
5  1.604467 -1.021435  0.532326 -0.935846      Q2     Even
6 -0.004012 -0.211094  0.187276  0.351893      Q3      Odd
7  0.386894 -0.350483 -0.938038  1.281466      Q3     Even
8 -0.975269  0.449554  0.349185  1.100768      Q3      Odd
groups_t = df.groupby(['Quarter', 'Odd_Even'])
groups_t.describe()
                             No1       No2       No3       No4
Quarter Odd_Even                                              
Q1      Even     count  1.000000  1.000000  1.000000  1.000000
                 mean   0.174852  0.491261  0.845292  1.139526
                 std         NaN       NaN       NaN       NaN
                 min    0.174852  0.491261  0.845292  1.139526
                 25%    0.174852  0.491261  0.845292  1.139526
                 50%    0.174852  0.491261  0.845292  1.139526
                 75%    0.174852  0.491261  0.845292  1.139526
                 max    0.174852  0.491261  0.845292  1.139526
        Odd      count  2.000000  2.000000  2.000000  2.000000
                 mean  -0.475842 -0.684690  0.046353  1.107394
                 std    0.406217  1.366839  1.300751  0.973799
                 min   -0.763081 -1.651191 -0.873416  0.418814
                 25%   -0.619461 -1.167941 -0.413531  0.763104
                 50%   -0.475842 -0.684690  0.046353  1.107394
                 75%   -0.332222 -0.201440  0.506238  1.451684
                 max   -0.188603  0.281811  0.966123  1.795974
Q2      Even     count  2.000000  2.000000  2.000000  2.000000
                 mean   0.773267 -0.075941  1.001604 -0.752965
                 std    1.175494  1.337131  0.663659  0.258632
                 min   -0.057932 -1.021435  0.532326 -0.935846
                 25%    0.357668 -0.548688  0.766965 -0.844406
                 50%    0.773267 -0.075941  1.001604 -0.752965
                 75%    1.188867  0.396807  1.236243 -0.661525
                 max    1.604467  0.869554  1.470882 -0.570085
        Odd      count  1.000000  1.000000  1.000000  1.000000
                 mean  -0.288625  2.191020 -0.918457 -1.291224
                 std         NaN       NaN       NaN       NaN
                 min   -0.288625  2.191020 -0.918457 -1.291224
                 25%   -0.288625  2.191020 -0.918457 -1.291224
                 50%   -0.288625  2.191020 -0.918457 -1.291224
                 75%   -0.288625  2.191020 -0.918457 -1.291224
                 max   -0.288625  2.191020 -0.918457 -1.291224
Q3      Even     count  1.000000  1.000000  1.000000  1.000000
                 mean   0.386894 -0.350483 -0.938038  1.281466
                 std         NaN       NaN       NaN       NaN
                 min    0.386894 -0.350483 -0.938038  1.281466
                 25%    0.386894 -0.350483 -0.938038  1.281466
                 50%    0.386894 -0.350483 -0.938038  1.281466
                 75%    0.386894 -0.350483 -0.938038  1.281466
                 max    0.386894 -0.350483 -0.938038  1.281466
        Odd      count  2.000000  2.000000  2.000000  2.000000
                 mean  -0.489641  0.119230  0.268231  0.726330
                 std    0.686782  0.467149  0.114487  0.529535
                 min   -0.975269 -0.211094  0.187276  0.351893
                 25%   -0.732455 -0.045932  0.227753  0.539112
                 50%   -0.489641  0.119230  0.268231  0.726330
                 75%   -0.246826  0.284392  0.308708  0.913549
                 max   -0.004012  0.449554  0.349185  1.100768
df
        No1       No2       No3       No4 Quarter Odd_Even
0 -0.188603 -1.651191 -0.873416  0.418814      Q1      Odd
1  0.174852  0.491261  0.845292  1.139526      Q1     Even
2 -0.763081  0.281811  0.966123  1.795974      Q1      Odd
3 -0.057932  0.869554  1.470882 -0.570085      Q2     Even
4 -0.288625  2.191020 -0.918457 -1.291224      Q2      Odd
5  1.604467 -1.021435  0.532326 -0.935846      Q2     Even
6 -0.004012 -0.211094  0.187276  0.351893      Q3      Odd
7  0.386894 -0.350483 -0.938038  1.281466      Q3     Even
8 -0.975269  0.449554  0.349185  1.100768      Q3      Odd

# conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
# conda config --set show_channel_urls yes
# conda install -c anaconda pandas-datareader


from pandas_datareader import data as web, wb



DAX = web.DataReader(name='^GDAXI', data_source='yahoo', start='2017-4-10')
DAX
                    Open          High           Low         Close     Volume  \
Date                                                                            
2017-04-10  12244.500000  12246.879883  12178.099609  12200.519531   56772300   
2017-04-11  12149.400391  12221.429688  12049.929688  12139.349609   81596000   
2017-04-12  12174.959961  12242.759766  12123.120117  12154.700195   74185200   
2017-04-13  12137.570312  12147.700195  12089.940430  12109.000000   73577600   
2017-04-18  12135.610352  12162.469727  11996.740234  12000.440430   87088100   
2017-04-19  12014.030273  12040.230469  12001.860352  12016.450195   83247900   
2017-04-20  11968.059570  12050.660156  11941.570312  12027.320312   82816800   
2017-04-21  12032.780273  12091.330078  12009.120117  12048.570312  106406900   

               Adj Close  
Date                      
2017-04-10  12200.519531  
2017-04-11  12139.349609  
2017-04-12  12154.700195  
2017-04-13  12109.000000  
2017-04-18  12000.440430  
2017-04-19  12016.450195  
2017-04-20  12027.320312  
2017-04-21  12048.570312  


DAX['Retusn']=np.log(DAX['Close']/DAX['Close'].shift(1))
DAX
                    Open          High           Low         Close     Volume  \
Date                                                                            
2017-04-10  12244.500000  12246.879883  12178.099609  12200.519531   56772300   
2017-04-11  12149.400391  12221.429688  12049.929688  12139.349609   81596000   
2017-04-12  12174.959961  12242.759766  12123.120117  12154.700195   74185200   
2017-04-13  12137.570312  12147.700195  12089.940430  12109.000000   73577600   
2017-04-18  12135.610352  12162.469727  11996.740234  12000.440430   87088100   
2017-04-19  12014.030273  12040.230469  12001.860352  12016.450195   83247900   
2017-04-20  11968.059570  12050.660156  11941.570312  12027.320312   82816800   
2017-04-21  12032.780273  12091.330078  12009.120117  12048.570312  106406900   

               Adj Close    Retusn  
Date                                
2017-04-10  12200.519531       NaN  
2017-04-11  12139.349609 -0.005026  
2017-04-12  12154.700195  0.001264  
2017-04-13  12109.000000 -0.003767  
2017-04-18  12000.440430 -0.009006  
2017-04-19  12016.450195  0.001333  
2017-04-20  12027.320312  0.000904  
2017-04-21  12048.570312  0.001765  


from urllib.request import urlretrieve


es_url = 'http://www.stoxx.com/download/historical_values/hbrbcpe.txt'
vs_url = 'http://www.stoxx.com/download/historical_values/h_vstoxx.txt'
urlretrieve(es_url, './data/es.txt')
urlretrieve(vs_url, './data/vs.txt')

lines = open('./data/es.txt', 'r').readlines()
for line in lines[3883:3890]:
    print(line[41:])
 
 300.97;   317.10;   267.23;  5268.36 ;  363.19

 306.60;   322.55;   272.18;  5360.52 ;  370.94

 306.77;   322.69;   272.95;  5360.52 ;  370.94

 312.43;   327.57;   277.68;  5479.59;   378.69;

 314.52;   329.94;   278.87;  5585.35;   386.99;

 311.43;   326.77;   272.38;  5522.25;   380.09;

 317.54;   332.62;   277.08;  5722.57;   396.12;

lines = [line.replace(' ', '') for line in lines]
new_file = open('./data/es50.txt', 'w')
new_file.writelines('data'+lines[3][:-1]+';DEL'+lines[3][-1])
new_file.writelines(lines[4:])
new_file.close()

es = pd.read_csv('./data/es50.txt', index_col=0, parse_dates=True, sep=';', dayfirst=True)
es.tail()
               SX5P     SX5E    SXXP    SXXE    SXXF    SXXA     DK5F    DKXF  \
data                                                                            
2016-09-28  2846.55  2991.11  342.57  324.24  407.97  350.45  9072.09  581.27   
2016-09-29  2848.93  2991.58  342.72  324.08  407.65  350.90  9112.09  582.60   
2016-09-30  2843.17  3002.24  342.92  325.31  408.27  350.09  9115.81  583.26   
2016-10-03  2845.43  2998.50  343.23  325.08  408.44  350.92  9131.24  584.32   
2016-10-04  2871.06  3029.50  346.10  327.73  411.41  353.92  9212.05  588.71   

            DEL  
data             
2016-09-28  NaN  
2016-09-29  NaN  
2016-09-30  NaN  
2016-10-03  NaN  
2016-10-04  NaN  
del es['DEL']
es.tail()
               SX5P     SX5E    SXXP    SXXE    SXXF    SXXA     DK5F    DKXF
data                                                                         
2016-09-28  2846.55  2991.11  342.57  324.24  407.97  350.45  9072.09  581.27
2016-09-29  2848.93  2991.58  342.72  324.08  407.65  350.90  9112.09  582.60
2016-09-30  2843.17  3002.24  342.92  325.31  408.27  350.09  9115.81  583.26
2016-10-03  2845.43  2998.50  343.23  325.08  408.44  350.92  9131.24  584.32
2016-10-04  2871.06  3029.50  346.10  327.73  411.41  353.92  9212.05  588.71
es.info()
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 7673 entries, 1986-12-31 to 2016-10-04
Data columns (total 8 columns):
SX5P    7673 non-null float64
SX5E    7673 non-null float64
SXXP    7673 non-null float64
SXXE    7673 non-null float64
SXXF    7673 non-null float64
SXXA    7673 non-null float64
DK5F    7673 non-null float64
DKXF    7673 non-null float64
dtypes: float64(8)
memory usage: 539.5 KB

vs = pd.read_csv('./data/vs.txt', index_col=0, header=2, parse_dates=True, sep=',', dayfirst=True)
vs.info()
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 4357 entries, 1999-01-04 to 2016-02-12
Data columns (total 9 columns):
V2TX    4357 non-null float64
V6I1    3906 non-null float64
V6I2    4357 non-null float64
V6I3    4296 non-null float64
V6I4    4357 non-null float64
V6I5    4357 non-null float64
V6I6    4340 non-null float64
V6I7    4357 non-null float64
V6I8    4343 non-null float64
dtypes: float64(9)
memory usage: 340.4 KB
vs.tail()
               V2TX     V6I1     V6I2     V6I3     V6I4     V6I5     V6I6  \
Date                                                                        
2016-02-08  33.3917  34.7251  33.2189  31.8308  31.4783  30.6941  30.3705   
2016-02-09  33.9664  35.7884  33.7800  32.6220  32.2459  31.5572  31.1659   
2016-02-10  33.4528  34.6020  33.3637  32.1438  32.0018  31.2099  30.9937   
2016-02-11  38.3051  41.2095  38.1347  35.8676  35.1073  33.7847  33.4126   
2016-02-12  35.6846  35.3849  35.6965  34.1404  33.8645  32.9590  32.8208   

               V6I7     V6I8  
Date                          
2016-02-08  29.8478  29.2559  
2016-02-09  30.5339  29.9000  
2016-02-10  30.8174  30.2533  
2016-02-11  32.2234  31.2124  
2016-02-12  32.3189  31.8194  
import datetime as dt
data = pd.DataFrame({'EUROSTOXX': es['SX5E'][es.index > dt.datetime(1999, 1,1)]})
data
            EUROSTOXX
data                 
1999-01-04    3543.10
1999-01-05    3604.67
1999-01-06    3685.36
1999-01-07    3627.87
1999-01-08    3616.57
1999-01-11    3546.40
1999-01-12    3502.38
1999-01-13    3336.45
1999-01-14    3365.43
1999-01-15    3426.06
1999-01-18    3515.43
1999-01-19    3515.69
1999-01-20    3601.36
1999-01-21    3561.56
1999-01-22    3426.11
1999-01-25    3428.80
1999-01-26    3433.87
1999-01-27    3453.70
1999-01-28    3511.31
1999-01-29    3547.15
1999-02-01    3597.04
1999-02-02    3541.43
1999-02-03    3488.13
1999-02-04    3487.08
1999-02-05    3489.98
1999-02-08    3462.29
1999-02-09    3342.58
1999-02-10    3325.56
1999-02-11    3375.42
1999-02-12    3405.68
...               ...
2016-08-24    3008.59
2016-08-25    2987.69
2016-08-26    3010.36
2016-08-29    2998.50
2016-08-30    3030.75
2016-08-31    3023.13
2016-09-01    3017.49
2016-09-02    3079.74
2016-09-05    3077.66
2016-09-06    3070.16
2016-09-07    3091.66
2016-09-08    3083.54
2016-09-09    3053.20
2016-09-12    3012.88
2016-09-13    2974.80
2016-09-14    2964.90
2016-09-15    2973.77
2016-09-16    2935.25
2016-09-19    2968.31
2016-09-20    2964.86
2016-09-21    2982.18
2016-09-22    3051.69
2016-09-23    3032.31
2016-09-26    2975.88
2016-09-27    2970.84
2016-09-28    2991.11
2016-09-29    2991.58
2016-09-30    3002.24
2016-10-03    2998.50
2016-10-04    3029.50

[4554 rows x 1 columns]
es.tail()
               SX5P     SX5E    SXXP    SXXE    SXXF    SXXA     DK5F    DKXF
data                                                                         
2016-09-28  2846.55  2991.11  342.57  324.24  407.97  350.45  9072.09  581.27
2016-09-29  2848.93  2991.58  342.72  324.08  407.65  350.90  9112.09  582.60
2016-09-30  2843.17  3002.24  342.92  325.31  408.27  350.09  9115.81  583.26
2016-10-03  2845.43  2998.50  343.23  325.08  408.44  350.92  9131.24  584.32
2016-10-04  2871.06  3029.50  346.10  327.73  411.41  353.92  9212.05  588.71
tmpdatas = pd.DataFrame({'VSTOXX': vs['V2TX'][vs.index > dt.datetime(1999, 1, 1)]})
tmpdatas
             VSTOXX
Date               
1999-01-04  18.2033
1999-01-05  29.6912
1999-01-06  25.1670
1999-01-07  32.5205
1999-01-08  33.2296
1999-01-11  36.8411
1999-01-12  37.5664
1999-01-13  39.7373
1999-01-14  39.1373
1999-01-15  38.6741
1999-01-18  38.5439
1999-01-19  38.7869
1999-01-20  35.5535
1999-01-21  36.9171
1999-01-22  39.9439
1999-01-25  40.7034
1999-01-26  42.7544
1999-01-27  41.7569
1999-01-28  39.1479
1999-01-29  37.6140
1999-02-01  37.0314
1999-02-02  38.6119
1999-02-03  39.9634
1999-02-04  38.7933
1999-02-05  37.8148
1999-02-08  38.7652
1999-02-09  39.5509
1999-02-10  40.3040
1999-02-11  37.8309
1999-02-12  36.0635
...             ...
2016-01-04  26.9980
2016-01-05  26.2087
2016-01-06  26.3090
2016-01-07  29.7899
2016-01-08  30.4005
2016-01-11  30.2182
2016-01-12  28.5388
2016-01-13  28.1348
2016-01-14  29.9390
2016-01-15  34.5856
2016-01-18  34.3250
2016-01-19  30.7571
2016-01-20  35.1133
2016-01-21  31.7894
2016-01-22  28.3356
2016-01-25  28.4443
2016-01-26  28.1187
2016-01-27  27.7832
2016-01-28  29.8315
2016-01-29  27.3890
2016-02-01  27.3303
2016-02-02  29.1542
2016-02-03  30.7369
2016-02-04  29.6423
2016-02-05  30.0529
2016-02-08  33.3917
2016-02-09  33.9664
2016-02-10  33.4528
2016-02-11  38.3051
2016-02-12  35.6846

[4357 rows x 1 columns]
data.join(tmpdatas)
            EUROSTOXX   VSTOXX
data                          
1999-01-04    3543.10  18.2033
1999-01-05    3604.67  29.6912
1999-01-06    3685.36  25.1670
1999-01-07    3627.87  32.5205
1999-01-08    3616.57  33.2296
1999-01-11    3546.40  36.8411
1999-01-12    3502.38  37.5664
1999-01-13    3336.45  39.7373
1999-01-14    3365.43  39.1373
1999-01-15    3426.06  38.6741
1999-01-18    3515.43  38.5439
1999-01-19    3515.69  38.7869
1999-01-20    3601.36  35.5535
1999-01-21    3561.56  36.9171
1999-01-22    3426.11  39.9439
1999-01-25    3428.80  40.7034
1999-01-26    3433.87  42.7544
1999-01-27    3453.70  41.7569
1999-01-28    3511.31  39.1479
1999-01-29    3547.15  37.6140
1999-02-01    3597.04  37.0314
1999-02-02    3541.43  38.6119
1999-02-03    3488.13  39.9634
1999-02-04    3487.08  38.7933
1999-02-05    3489.98  37.8148
1999-02-08    3462.29  38.7652
1999-02-09    3342.58  39.5509
1999-02-10    3325.56  40.3040
1999-02-11    3375.42  37.8309
1999-02-12    3405.68  36.0635
...               ...      ...
2016-08-24    3008.59      NaN
2016-08-25    2987.69      NaN
2016-08-26    3010.36      NaN
2016-08-29    2998.50      NaN
2016-08-30    3030.75      NaN
2016-08-31    3023.13      NaN
2016-09-01    3017.49      NaN
2016-09-02    3079.74      NaN
2016-09-05    3077.66      NaN
2016-09-06    3070.16      NaN
2016-09-07    3091.66      NaN
2016-09-08    3083.54      NaN
2016-09-09    3053.20      NaN
2016-09-12    3012.88      NaN
2016-09-13    2974.80      NaN
2016-09-14    2964.90      NaN
2016-09-15    2973.77      NaN
2016-09-16    2935.25      NaN
2016-09-19    2968.31      NaN
2016-09-20    2964.86      NaN
2016-09-21    2982.18      NaN
2016-09-22    3051.69      NaN
2016-09-23    3032.31      NaN
2016-09-26    2975.88      NaN
2016-09-27    2970.84      NaN
2016-09-28    2991.11      NaN
2016-09-29    2991.58      NaN
2016-09-30    3002.24      NaN
2016-10-03    2998.50      NaN
2016-10-04    3029.50      NaN

[4554 rows x 2 columns]
data.join(tmpdatas).fillna(method='ffill')
            EUROSTOXX   VSTOXX
data                          
1999-01-04    3543.10  18.2033
1999-01-05    3604.67  29.6912
1999-01-06    3685.36  25.1670
1999-01-07    3627.87  32.5205
1999-01-08    3616.57  33.2296
1999-01-11    3546.40  36.8411
1999-01-12    3502.38  37.5664
1999-01-13    3336.45  39.7373
1999-01-14    3365.43  39.1373
1999-01-15    3426.06  38.6741
1999-01-18    3515.43  38.5439
1999-01-19    3515.69  38.7869
1999-01-20    3601.36  35.5535
1999-01-21    3561.56  36.9171
1999-01-22    3426.11  39.9439
1999-01-25    3428.80  40.7034
1999-01-26    3433.87  42.7544
1999-01-27    3453.70  41.7569
1999-01-28    3511.31  39.1479
1999-01-29    3547.15  37.6140
1999-02-01    3597.04  37.0314
1999-02-02    3541.43  38.6119
1999-02-03    3488.13  39.9634
1999-02-04    3487.08  38.7933
1999-02-05    3489.98  37.8148
1999-02-08    3462.29  38.7652
1999-02-09    3342.58  39.5509
1999-02-10    3325.56  40.3040
1999-02-11    3375.42  37.8309
1999-02-12    3405.68  36.0635
...               ...      ...
2016-08-24    3008.59  35.6846
2016-08-25    2987.69  35.6846
2016-08-26    3010.36  35.6846
2016-08-29    2998.50  35.6846
2016-08-30    3030.75  35.6846
2016-08-31    3023.13  35.6846
2016-09-01    3017.49  35.6846
2016-09-02    3079.74  35.6846
2016-09-05    3077.66  35.6846
2016-09-06    3070.16  35.6846
2016-09-07    3091.66  35.6846
2016-09-08    3083.54  35.6846
2016-09-09    3053.20  35.6846
2016-09-12    3012.88  35.6846
2016-09-13    2974.80  35.6846
2016-09-14    2964.90  35.6846
2016-09-15    2973.77  35.6846
2016-09-16    2935.25  35.6846
2016-09-19    2968.31  35.6846
2016-09-20    2964.86  35.6846
2016-09-21    2982.18  35.6846
2016-09-22    3051.69  35.6846
2016-09-23    3032.31  35.6846
2016-09-26    2975.88  35.6846
2016-09-27    2970.84  35.6846
2016-09-28    2991.11  35.6846
2016-09-29    2991.58  35.6846
2016-09-30    3002.24  35.6846
2016-10-03    2998.50  35.6846
2016-10-04    3029.50  35.6846

[4554 rows x 2 columns]
data = data.join(tmpdatas).fillna(method='ffill')
data.plot(subplots=True, grid=True, style='b', figsize=(8, 6))
array([<matplotlib.axes._subplots.AxesSubplot object at 0x7fcad667ebe0>,
       <matplotlib.axes._subplots.AxesSubplot object at 0x7fcad5bb2b70>], dtype=object)
plt.show()
rets = np.log(data / data.shift(1))
rets.head()
            EUROSTOXX    VSTOXX
data                           
1999-01-04        NaN       NaN
1999-01-05   0.017228  0.489248
1999-01-06   0.022138 -0.165317
1999-01-07  -0.015723  0.256337
1999-01-08  -0.003120  0.021570

rets.plot(subplots=True, grid=True, style='b', figsize=(8, 6))
array([<matplotlib.axes._subplots.AxesSubplot object at 0x7fcad596e8d0>,
       <matplotlib.axes._subplots.AxesSubplot object at 0x7fcad59f0c50>], dtype=object)
plt.show()
xdat = rets['EUROSTOXX']
ydat = rets['VSTOXX']
model = pd.ols(y=ydat, x=xdat)

model
model.beta

def bsm_mcs_valuation(strike):
  import numpy as np
  S0=100; T=1.0; r=0.05; vola=0.2
  M=50; I=20000
  dt=T/M
  rand = np.random.standard_normal((M+1, I))
  S = np.zeros((M+1, I)); S[0]=S0
  for t in range(1, M+1):
    S[t]=S[t-1] * np.exp((r - 0.5 * vola ** 2) * dt + vola * np.sqrt(dt) * rand[t])
  value = (np.exp(-r * T) * np.sum(np.maximum(S[-1] - strike, 0)) / I)
  return value

def seq_value(n):
  strikes = np.linspace(80, 120, n)
  option_values = []
  for strike in strikes:
    option_values.append(bsm_mcs_valuation(strike))
  return strikes, option_values


# conda install -c anaconda ipyparallel
# ipcluster start -n 4
from ipyparallel import Client
c = Client(profile='default')
view = c.load_balanced_view()

def par_value(n):
  import numpy as np
  strikes = np.linspace(80, 120, n)
  option_values = []
  for strike in strikes:
    value = view.apply_async(bsm_mcs_valuation, strike)
    option_values.append(value)
  c.wait(option_values)
  return strikes, option_values

strikes, option_values_obj = par_value(100)

'''
strikes
array([  80.        ,   80.4040404 ,   80.80808081,   81.21212121,
         81.61616162,   82.02020202,   82.42424242,   82.82828283,
         83.23232323,   83.63636364,   84.04040404,   84.44444444,
         84.84848485,   85.25252525,   85.65656566,   86.06060606,
         86.46464646,   86.86868687,   87.27272727,   87.67676768,
         88.08080808,   88.48484848,   88.88888889,   89.29292929,
         89.6969697 ,   90.1010101 ,   90.50505051,   90.90909091,
         91.31313131,   91.71717172,   92.12121212,   92.52525253,
         92.92929293,   93.33333333,   93.73737374,   94.14141414,
         94.54545455,   94.94949495,   95.35353535,   95.75757576,
         96.16161616,   96.56565657,   96.96969697,   97.37373737,
         97.77777778,   98.18181818,   98.58585859,   98.98989899,
         99.39393939,   99.7979798 ,  100.2020202 ,  100.60606061,
        101.01010101,  101.41414141,  101.81818182,  102.22222222,
        102.62626263,  103.03030303,  103.43434343,  103.83838384,
        104.24242424,  104.64646465,  105.05050505,  105.45454545,
        105.85858586,  106.26262626,  106.66666667,  107.07070707,
        107.47474747,  107.87878788,  108.28282828,  108.68686869,
        109.09090909,  109.49494949,  109.8989899 ,  110.3030303 ,
        110.70707071,  111.11111111,  111.51515152,  111.91919192,
        112.32323232,  112.72727273,  113.13131313,  113.53535354,
        113.93939394,  114.34343434,  114.74747475,  115.15151515,
        115.55555556,  115.95959596,  116.36363636,  116.76767677,
        117.17171717,  117.57575758,  117.97979798,  118.38383838,
        118.78787879,  119.19191919,  119.5959596 ,  120.        ])
>>> option_values_obj
[<AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>, <AsyncResult: bsm_mcs_valuation:finished>]
'''

option_values_par = []
for res in option_values_obj:
  option_values_par.append(res.r)
plt.figure(figsize=(8, 4))
plt.plot(strikes, option_values_par, 'r')
plt.grid(True)
plt.legend(loc=0)


import multiprocessing as mp
import math
def simulate_geometric_brownian_motion(p):
  import numpy as np
  M, I = p
  S0 = 100; r = 0.05; sigma = 0.2; T = 1.0
  dt = T / M
  paths = np.zeros((M + 1, I))
  paths[0] = S0
  for t in range(1, M + 1):
    paths[t] = paths[t - 1] * np.exp((r - 0.5 * sigma ** 2) * dt + sigma * math.sqrt(dt) * np.random.standard_normal(I))
  return paths

paths = simulate_geometric_brownian_motion((5, 2))
I = 10000
M = 100
t = 100

from time import time
times = []
for w in range(1. 17):
  t0 = time()
  pool = mp.Pool(processes=w)
  result = pool.map(simulate_geometric_brownian_motion, t * [(M, I), ])
  times.append(time() - t0)

plt.plot(range(1, 17), times)
plt.plot(range(1, 17), times, 'ro')
plt.grid(True)
plt.show()